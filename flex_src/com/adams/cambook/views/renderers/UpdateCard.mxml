<?xml version="1.0" encoding="utf-8"?>
<s:ItemRenderer xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" width="100%"  clipAndEnableScrolling="false"
		 xmlns:components="com.adams.cambook.views.components.*"
		 creationComplete="onCreationComplete()"> 
	<fx:Script>
		<![CDATA[
			import com.adams.cambook.models.vo.Notes;
			import com.adams.cambook.models.vo.Persons;
			import com.adams.cambook.utils.GetVOUtil;
			import com.adams.cambook.utils.Utils;
			import com.adams.cambook.views.components.NativeList;
			
			import mx.collections.ArrayCollection;
			import mx.core.FlexGlobals;
			import mx.core.IFlexDisplayObject;
			import mx.core.mx_internal;
			import mx.events.FlexEvent;
			import mx.managers.PopUpManager;
			
			use namespace mx_internal
			private var note:Notes = new Notes();

			 private function onCreationComplete():void{
				 commentDG.itemRenderer = Utils.getCustomRenderer(Utils.REPLY);  
			 }
			override public function set data(value:Object):void{
				super.data = value;
				if(value){
					note = value as Notes;
					noteTxt.text = note.description;
					var personObj:Persons = new Persons();
					personObj.personId = note.createdPersonFK;
					personObj = Utils.findObject(personObj,currentPersonsList,Utils.PERSONKEY) as Persons;
					notePersonName.text = personObj.personFirstname + ' '+personObj.personLastname;
					if(note.notesSet)if(note.notesSet.length>0)
					commentDG.dataProvider = note.notesSet;
					sharBtn.visible = note.personFK ? true:false;
					likeBtn.visible = note.createdPersonFK == currentPersonId ? false:true;
				}
			}
			private function addReply(eve:MouseEvent):void{ 
				var replyNote:Notes = new Notes();
				replyNote.description = commentArea.text;
				replyNote.createdPersonFK =Object( owner ).currentPersonId;
				replyNote.creationDate = new Date(); 
				replyNote.noteType = note.noteId;
				replyNote.noteFK = note.noteId;
				Object( owner ).renderSignal.dispatch(NativeList.REPLIEDUPDATE,replyNote,note);
				currentState='normal';
			}
			
			public static var currentPersonId:int;
			public static var currentPersonsList:ArrayCollection;
		 
			private var buddyCard:BuddyCard = new BuddyCard();
			
			protected function onClickHandler(event:MouseEvent):void{
				buddyCard.x = stage.mouseX;
				buddyCard.y = stage.mouseY;
				PopUpManager.addPopUp(buddyCard,this);
			}
			protected function label1_rollOutHandler(event:MouseEvent):void{
				PopUpManager.removePopUp(buddyCard);
			}
		]]>
	</fx:Script>
	<s:states>
		<s:State name="normal" />
		<s:State name="hover" />
		<s:State name="replyState" />
	</s:states>
	<s:VGroup width="100%" height="100%" bottom="4">
		<s:VGroup width="100%" height="100%" paddingBottom="5" paddingLeft="5" paddingRight="5" paddingTop="5">
			<s:Label id="notePersonName" click="onClickHandler(event)" width="100%" />
			<s:Label id="noteTxt"  maxDisplayedLines="3" showTruncationTip="true" width="100%"/>	
		</s:VGroup>
		<s:HGroup width="100%" horizontalAlign="right" paddingRight="5">
			<components:NativeButton id="sharBtn" toolTip="share" styleName="shareSkin"/>
			<components:NativeButton id="likeBtn" toolTip="Like" styleName="likeSkin"/>
			<components:NativeButton id="commentBtn" toolTip="Comment" styleName="commentSkin" click="currentState='replyState'"/>	
		</s:HGroup>
			<components:NativeList id="commentDG" width="100%" minHeight="40"/>
		<s:HGroup verticalAlign="contentJustify" width="100%" includeIn="replyState"
				  paddingLeft="5" paddingRight="5">
			<s:TextArea height="35" id="commentArea" width="100%"/>	
			<components:NativeButton label="reply" id="replyBtn" click="addReply(event)"/>
		</s:HGroup>
		<s:Line width="100%" height="1"><s:stroke><s:SolidColorStroke color="#3a3a3a"/></s:stroke></s:Line>
	</s:VGroup>	 
</s:ItemRenderer>